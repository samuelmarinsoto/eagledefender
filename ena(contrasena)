[1mdiff --git a/registro.py b/registro.py[m
[1mindex de8def7..c802550 100644[m
[1m--- a/registro.py[m
[1m+++ b/registro.py[m
[36m@@ -1,6 +1,8 @@[m
[31m-import calendar[m
[32m+[m[32mimport datetime[m
 import tkinter[m
 import tkinter.messagebox[m
[32m+[m[32mfrom tkinter import simpledialog[m
[32m+[m
 import customtkinter[m
 import tkinter.filedialog as filedialog[m
 from PIL import Image, ImageTk[m
[36m@@ -10,13 +12,9 @@[m [mimport cv2[m
 from matplotlib import pyplot[m
 from mtcnn.mtcnn import MTCNN[m
 import numpy as np[m
[32m+[m[32mimport DataBase[m
 import menu[m
[31m-import datauser as user[m
[31m-from tkcalendar import Calendar[m
[31m-from datetime import date[m
[31m-import spot[m
[31m-[m
[31m-Userspotify = spot.userSpot[m
[32m+[m[32mimport re[m
 [m
 [m
 # customtkinter.set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"[m
[36m@@ -24,242 +22,243 @@[m [mUserspotify = spot.userSpot[m
 [m
 [m
 class Registro(customtkinter.CTk):[m
[31m-    print("Member:", dic.Member)[m
[32m+[m[32m    """[m
[32m+[m[32m       Clase que representa la ventana de registro de la aplicaci√≥n.[m
[32m+[m
[32m+[m[32m       Esta clase crea una ventana de registro con tres pesta√±as: Datos, Juego y Personalizaci√≥n. Cada pesta√±a tiene campos[m
[32m+[m[32m       para ingresar informaci√≥n de usuario y opciones de personalizaci√≥n.[m
 [m
[32m+[m[32m       Args:[m
[32m+[m[32m           Ninguno[m
[32m+[m
[32m+[m[32m       Attributes:[m
[32m+[m[32m           Ninguno[m
[32m+[m
[32m+[m[32m       """[m
     def __init__(self):[m
[32m+[m
[32m+[m[32m        """[m
[32m+[m[32m               Inicializa una instancia de la clase Registro.[m
[32m+[m
[32m+[m[32m               Crea una ventana de registro con pesta√±as para Datos, Juego y Personalizaci√≥n. Dentro de cada pesta√±a, se[m
[32m+[m[32m               proporcionan campos para ingresar informaci√≥n de usuario y opciones de personalizaci√≥n.[m
[32m+[m
[32m+[m[32m               """[m
         green = "#245953"[m
         green_light = "#408E91"[m
         pink = "#E49393"[m
[31m-        grey = "#000000"[m
[32m+[m[32m        grey = "#D8D8D8"[m
         font_style = ('helvic', 20)[m
         self.imagen_seleccionada = None[m
         super().__init__()[m
 [m
         # configure window[m
[31m-        # self.attributes("-fullscreen", True)[m
         self.title(dic.Registration[dic.language])[m
[31m-        self.geometry(f"{800}x{800}")[m
[32m+[m[32m        self.geometry(f"{500}x{500}")[m
 [m
         # configure grid layout (4x4)[m
 [m
         # create sidebar frame with widgets[m
 [m
[31m-        self.tabview = customtkinter.CTkTabview(self, width=800, height=800, fg_color=grey,[m
[31m-                                                segmented_button_selected_color=green,[m
[31m-                                                segmented_button_selected_hover_color=pink)[m
[32m+[m[32m        self.tabview = customtkinter.CTkTabview(self, width=400, height=400, fg_color=grey , segmented_button_selected_color=green, segmented_button_selected_hover_color=pink)[m
         self.tabview.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)[m
         self.tabview.add(dic.Data[dic.language])[m
         self.tabview.add(dic.Game[dic.language])[m
         self.tabview.add(dic.Personalization[dic.language])[m
[31m-        self.tabview.add("Texturas")[m
         self.tabview.tab(dic.Data[dic.language]).grid_columnconfigure(0, weight=1)  # configure grid of individual tabs[m
         self.tabview.tab(dic.Game[dic.language]).grid_columnconfigure(0, weight=1)[m
 [m
[31m-        self.logo_label = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]),[m
[31m-                                                 text=dic.Registration[dic.language],[m
[31m-                                                 font=customtkinter.CTkFont(size=20, weight="bold"))[m
[32m+[m
[32m+[m
[32m+[m[32m        self.logo_label = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Registration[dic.language], font=customtkinter.CTkFont(size=20, weight="bold"))[m
         self.logo_label.place(relx=0.5, rely=0.1, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.nombre = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Name[dic.language],[m
[31m-                                             anchor="w")[m
[32m+[m
[32m+[m[32m        self.nombre = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Name[dic.language], anchor="w")[m
         self.nombre.place(relx=0.5, rely=0.2, anchor=customtkinter.CENTER)[m
 [m
         self.entry_Nombre = customtkinter.CTkEntry(self.tabview.tab(dic.Data[dic.language]))[m
         self.entry_Nombre.place(relx=0.5, rely=0.3, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.apellido = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Surname[dic.language],[m
[31m-                                               anchor="w")[m
[32m+[m[32m        self.apellido = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Surname[dic.language], anchor="w")[m
         self.apellido.place(relx=0.5, rely=0.4, anchor=customtkinter.CENTER)[m
 [m
         self.entry_Apellido = customtkinter.CTkEntry(self.tabview.tab(dic.Data[dic.language]))[m
         self.entry_Apellido.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.correo = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Email[dic.language],[m
[31m-                                             anchor="w")[m
[32m+[m
[32m+[m[32m        self.correo = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text=dic.Email[dic.language], anchor="w")[m
         self.correo.place(relx=0.5, rely=0.6, anchor=customtkinter.CENTER)[m
 [m
         self.entry_Correo = customtkinter.CTkEntry(self.tabview.tab(dic.Data[dic.language]))[m
         self.entry_Correo.place(relx=0.5, rely=0.7, anchor=customtkinter.CENTER)[m
 [m
 [m
[31m-        self.edad_label = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]),[m
[31m-                                                 text=dic.Age[dic.language] + ": 0")[m
[32m+[m[32m        self.edad_label = customtkinter.CTkLabel(self.tabview.tab(dic.Data[dic.language]), text= dic.Age[dic.language]+": 0")[m
         self.edad_label.place(relx=0.5, rely=0.8, anchor=customtkinter.CENTER)[m
 [m
[32m+[m[32m        self.edad_slider = customtkinter.CTkSlider(self.tabview.tab(dic.Data[dic.language]), command=self.update_edad_label, from_=0, to=100, button_color = green, button_hover_color=pink)[m
[32m+[m[32m        self.edad_slider.place(relx=0.5, rely=0.9, anchor=customtkinter.CENTER)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
 [m
[31m-        self.calendario = Calendar(self,mindate=date(1930,1,1),maxdate=date.today())[m
[31m-        self.calendario.place_forget()[m
 [m
[31m-        self.edad_button = customtkinter.CTkButton(self.tabview.tab(dic.Data[dic.language]), text = "Confirmar fecha",fg_color=green_light,[m
[31m-                                                        hover_color=green, command= lambda: [self.DateSelect(),self.toggle_calendar()])[m
[31m-        self.edad_button.place_forget()[m
[31m-        # -------------------------------------------------------------------------------[m
 [m
[31m-        self.logo_label = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]),[m
[31m-                                                 text=dic.Registration[dic.language],[m
[32m+[m[32m        #-------------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m        self.logo_label = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), text=dic.Registration[dic.language],[m
                                                  font=customtkinter.CTkFont(size=20, weight="bold"))[m
         self.logo_label.place(relx=0.5, rely=0.1, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.username = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]),[m
[31m-                                               text=dic.Username[dic.language], anchor="w")[m
[32m+[m[32m        self.username = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), text=dic.Username[dic.language], anchor="w")[m
         self.username.place(relx=0.5, rely=0.2, anchor=customtkinter.CENTER)[m
         self.entry_Username = customtkinter.CTkEntry(self.tabview.tab(dic.Game[dic.language]))[m
         self.entry_Username.place(relx=0.5, rely=0.3, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.contra = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), text=dic.Password[dic.language],[m
[31m-                                             anchor="w")[m
[32m+[m[32m        self.contra = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), text=dic.Password[dic.language], anchor="w")[m
         self.contra.place(relx=0.5, rely=0.4, anchor=customtkinter.CENTER)[m
 [m
         self.entry_Contra = customtkinter.CTkEntry(self.tabview.tab(dic.Game[dic.language]), show="‚óä")[m
         self.entry_Contra.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.foto_label = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), corner_radius=60,[m
[31m-                                                 text=dic.Photo[dic.language])[m
[31m-        self.foto_label.place(relx=0.25, rely=0.7, anchor=customtkinter.CENTER)[m
[31m-        self.camera_icon = ImageTk.PhotoImage(file="camera_icon.png")  # Cargar el √≠cono[m
[31m-        self.camera_button = customtkinter.CTkButton(self.tabview.tab(dic.Game[dic.language]), image=self.camera_icon,[m
[31m-                                                    corner_radius=0,[m
[31m-                                                    width=0, border_width=0,[m
[31m-                                                    text="", command=self.registro_facial)[m
[32m+[m[32m        self.contra_check = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), text="Confirmar Contrase√±a",[m
[32m+[m[32m                                             anchor="w")[m
[32m+[m[32m        self.contra_check.place(relx=0.5, rely=0.6, anchor=customtkinter.CENTER)[m
[32m+[m
[32m+[m[32m        self.entry_Contra_check = customtkinter.CTkEntry(self.tabview.tab(dic.Game[dic.language]), show="‚óä")[m
[32m+[m[32m        self.entry_Contra_check.place(relx=0.5, rely=0.7, anchor=customtkinter.CENTER)[m
[32m+[m
[32m+[m[32m        self.foto_label = customtkinter.CTkLabel(self.tabview.tab(dic.Game[dic.language]), corner_radius=60, text=dic.Photo[dic.language])[m
[32m+[m[32m        self.foto_label.place(relx=0.5, rely=0.8, anchor=customtkinter.CENTER)[m
[32m+[m
 [m
[31m-        self.camera_button.place(relx=0.75, rely=0.9, anchor=customtkinter.CENTER)[m
 [m
[31m-        # self.foto = customtkinter.CTkFrame(self.tabview.tab("Juego"), fg_color=grey, corner_radius=100, height=80,width=80)[m
[31m-        # self.foto.place(relx=0.5, rely=0.7, anchor=customtkinter.CENTER)[m
[32m+[m[32m        self.subir_Foto = customtkinter.CTkButton(self.tabview.tab(dic.Game[dic.language]), text="‚úö",fg_color=green_light, hover_color=green, corner_radius=80, width=10, command=self.abrir_archivo)[m
[32m+[m[32m        self.subir_Foto.place(relx=0.5, rely=0.9, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.subir_Foto = customtkinter.CTkButton(self.tabview.tab(dic.Game[dic.language]), text="‚úö",[m
[31m-                                                  fg_color=green_light, hover_color=green, corner_radius=80, width=10,[m
[31m-                                                  command=self.abrir_archivo)[m
[31m-        self.subir_Foto.place(relx=0.25, rely=0.9, anchor=customtkinter.CENTER)[m
 [m
[31m-        # ----------------------------------------------------------------------------------------[m
[32m+[m[32m        #----------------------------------------------------------------------------------------[m
 [m
[31m-        self.logo_label = customtkinter.CTkLabel(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                                 text=dic.Registration[dic.language],[m
[32m+[m[32m        self.logo_label = customtkinter.CTkLabel(self.tabview.tab(dic.Personalization[dic.language]), text=dic.Registration[dic.language],[m
                                                  font=customtkinter.CTkFont(size=20, weight="bold"))[m
         self.logo_label.place(relx=0.5, rely=0.1, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.username = customtkinter.CTkLabel(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                               text=dic.Theme[dic.language], anchor="w")[m
[32m+[m[32m        self.username = customtkinter.CTkLabel(self.tabview.tab(dic.Personalization[dic.language]), text=dic.Theme[dic.language], anchor="w")[m
         self.username.place(relx=0.5, rely=0.2, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.appearance_mode_optionemenu = customtkinter.CTkOptionMenu([m
[31m-            self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-            values=[dic.Red[dic.language], dic.Black[dic.language], dic.Blue[dic.language], dic.White[dic.language],[m
[31m-                    dic.Green[dic.language]], fg_color=green_light, button_color=green)[m
[32m+[m[32m        self.appearance_mode_optionemenu = customtkinter.CTkOptionMenu(self.tabview.tab(dic.Personalization[dic.language]), values=[dic.Red[dic.language], dic.Black[dic.language], dic.Blue[dic.language],dic.White[dic.language],dic.Green[dic.language]],fg_color=green_light, button_color=green)[m
         self.appearance_mode_optionemenu.place(relx=0.5, rely=0.3, anchor=customtkinter.CENTER)[m
 [m
[31m-        self.username = customtkinter.CTkLabel(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                               text=dic.FavoriteSongs[dic.language], anchor="w")[m
[32m+[m[32m        self.username = customtkinter.CTkLabel(self.tabview.tab(dic.Personalization[dic.language]), text=dic.FavoriteSongs[dic.language], anchor="w")[m
         self.username.place(relx=0.5, rely=0.4, anchor=customtkinter.CENTER)[m
[31m-        #---------------------------------------------------------------------------------------------[m
[31m-        self.userSpot = customtkinter.CTkEntry(self.tabview.tab(dic.Personalization[dic.language]))[m
[31m-        self.userSpot.place(relx=0.5, rely=0.4, anchor=customtkinter.CENTER)[m
[31m-        self.SaveuserSpot = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                                     text="Save Spotify User",[m
[31m-                                                     fg_color=green_light, hover_color=green,[m
[31m-                                                     command=self.UserSpotSelect)[m
[31m-        self.SaveuserSpot.place(relx=0.75, rely=0.4, anchor=customtkinter.CENTER)[m
[31m-[m
[31m-        self.cancion1 = customtkinter.CTkEntry(self.tabview.tab(dic.Personalization[dic.language]))[m
[31m-        self.cancion1.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)[m
[31m-        self.song_button_1 = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                                        text="Search",[m
[31m-                                                        fg_color=green_light, hover_color=green,[m
[31m-                                                        command=self.SongSelect1)[m
[31m-        self.song_button_1.place(relx=0.75, rely=0.5, anchor=customtkinter.CENTER)[m
 [m
[32m+[m[32m        self.cancion1 = customtkinter.CTkEntry(self.tabview.tab(dic.Personalization[dic.language]) )[m
[32m+[m[32m        self.cancion1.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)[m
         self.cancion2 = customtkinter.CTkEntry(self.tabview.tab(dic.Personalization[dic.language]))[m
         self.cancion2.place(relx=0.5, rely=0.6, anchor=customtkinter.CENTER)[m
[31m-        self.song_button_2 = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                                     text="Search",[m
[31m-                                                     fg_color=green_light, hover_color=green,[m
[31m-                                                     command=self.SongSelect2)[m
[31m-        self.song_button_2.place(relx=0.75, rely=0.6, anchor=customtkinter.CENTER)[m
[31m-[m
         self.cancion3 = customtkinter.CTkEntry(self.tabview.tab(dic.Personalization[dic.language]))[m
         self.cancion3.place(relx=0.5, rely=0.7, anchor=customtkinter.CENTER)[m
[31m-        self.song_button_3 = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                                     text="Search",[m
[31m-                                                     fg_color=green_light, hover_color=green,[m
[31m-                                                     command=self.SongSelect3)[m
[31m-        self.song_button_3.place(relx=0.75, rely=0.7, anchor=customtkinter.CENTER)[m
[31m-        # ---------------------------------------------------------------------------------------------[m
[31m-        # self.sidebar_button_1 = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-        #                                                 text=dic.Register[dic.language],[m
[31m-        #                                                 fg_color=green_light, hover_color=green,[m
[31m-        #                                                 command=self.registro_facial)[m
[31m-        # self.sidebar_button_1.place(relx=0.5, rely=0.9, anchor=customtkinter.CENTER)[m
[31m-[m
[31m-        self.calendario_button = customtkinter.CTkButton(self.tabview.tab(dic.Data[dic.language]),[m
[31m-                                                         text="Show/Hide Calendar",[m
[31m-                                                         fg_color=green_light, hover_color=green,[m
[31m-                                                         command=self.toggle_calendar)[m
[31m-        self.calendario_button.place(relx=0.5, rely=0.9, anchor=customtkinter.CENTER)[m
[31m-[m
[31m-        self.testPlay = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[31m-                                                text="Play text",[m
[31m-                                                fg_color=green_light, hover_color=green,[m
[31m-                                                command=self.PlayTEst)[m
[31m-        self.testPlay.place(relx=0.9, rely=0.9, anchor=customtkinter.CENTER)[m
[31m-    def UserSpotSelect(self):[m
[31m-        User = self.userSpot.get()[m
[31m-        spot.userSpot = User[m
[31m-        print(spot.userSpot)[m
[31m-    def SongSelect1(self):[m
[31m-        SongGet = self.cancion1.get()[m
[31m-        print("Here:",SongGet)[m
[31m-        if SongGet == "":[m
[31m-            return 0[m
[31m-        spot.SearchSong(SongGet)[m
[31m-        user.Songs1[0] = spot.Song1[m
[31m-        print(user.Songs1)[m
[31m-[m
[31m-    def SongSelect2(self):[m
[31m-        SongGet = self.cancion2.get()[m
[31m-        if SongGet == "":[m
[31m-            return 0[m
[31m-        spot.SearchSong(SongGet)[m
[31m-        user.Songs1[1] = spot.Song1[m
[31m-        print(user.Songs1)[m
[31m-    def SongSelect3(self):[m
[31m-        SongGet = self.cancion3.get()[m
[31m-        if SongGet == "":[m
[31m-            return 0[m
[31m-        spot.SearchSong(SongGet)[m
[31m-        user.Songs1[2] = spot.Song1[m
[31m-        print(user.Songs1)[m
[31m-[m
[31m-[m
[31m-    def PlayTEst(self):[m
[31m-        spot.PlaySong(user.Songs1[0])[m
[31m-    def DateSelect(self):[m
[31m-        datese = self.calendario.get_date()[m
[31m-        date_part = datese.split("/")[m
[31m-        month = int(date_part[0])[m
[31m-        day = int(date_part[1])[m
[31m-        if 0 <= int(date_part[2]) <= 23:[m
[31m-            year = int("20"+date_part[2])[m
[31m-        elif 30<= int(date_part[2]) <= 99:[m
[31m-            year = int("19" + date_part[2])[m
[31m-        dateborn = date(year, month, day)[m
[31m-        age = date.today().year-dateborn.year[m
[31m-        user.age = age[m
[31m-        self.update_edad_label(age)[m
 [m
[32m+[m[32m        self.sidebar_button_1 = customtkinter.CTkButton(self.tabview.tab(dic.Personalization[dic.language]),[m
[32m+[m[32m                                                        text=dic.Register[dic.language],[m
[32m+[m[32m                                                        fg_color=green_light, hover_color=green,[m
[32m+[m[32m                                                        command=self.on_register_button_click)[m
[32m+[m[32m        self.sidebar_button_1.place(relx=0.5, rely=0.9, anchor=customtkinter.CENTER)[m
[32m+[m[32m    def verificar_contrase√±as(self):[m
[32m+[m[32m        if self.entry_Contra.get() == self.entry_Contra_check.get():[m
[32m+[m[32m            return self.entry_Contra_check.get()[m
[32m+[m
[32m+[m[32m    def registrar_usuario(self):[m
[32m+[m[32m        # Recoge la informaci√≥n del usuario desde la GUI[m
[32m+[m[32m        usuario = self.entry_Username.get()[m
[32m+[m[32m        contra = self.verificar_contrase√±as()[m
[32m+[m[32m        if contra is None:[m
[32m+[m[32m            print("Error", "Las contrase√±as no coinciden.")[m
[32m+[m[32m            return[m
[32m+[m[32m        nombre = self.entry_Nombre.get()[m
[32m+[m[32m        apellido = self.entry_Apellido.get()[m
[32m+[m[32m        correo = self.entry_Correo.get()[m
[32m+[m[32m        edad = self.edad_slider.get()[m
[32m+[m[32m        # cancion = self.cancion1.get()[m
[32m+[m[32m        usuario_img = self.entry_Username.get()[m
[32m+[m[32m        imagen_ruta = 'ProfilePics/' + usuario_img + ".jpg"  # Ruta de la imagen guardada[m
[32m+[m
[32m+[m[32m        # Genera un nuevo c√≥digo de confirmaci√≥n[m
[32m+[m[32m        codigo = DataBase.generate_confirmation_code()[m
[32m+[m
[32m+[m[32m        # Guarda el c√≥digo de confirmaci√≥n en la base de datos[m
[32m+[m[32m        DataBase.save_confirmation_code(correo, codigo)[m
[32m+[m
[32m+[m[32m        # Enviar c√≥digo de confirmaci√≥n por correo electr√≥nico[m
[32m+[m[32m        DataBase.send_confirmation_email(correo, codigo)[m
[32m+[m
[32m+[m[32m        # Validaciones antes de insertar el usuario[m
[32m+[m[32m        if edad < 13:[m
[32m+[m[32m            tkinter.messagebox.showerror("Error", "El usuario debe tener al menos 13 a√±os para registrarse.")[m
[32m+[m[32m            return[m
[32m+[m
[32m+[m[32m        if DataBase.is_username_registered(usuario):[m
[32m+[m[32m            tkinter.messagebox.showerror("Error", "Este nombre de usuario ya est√° registrado.")[m
[32m+[m[32m            return[m
[32m+[m
[32m+[m[32m        if DataBase.is_email_registered(correo):[m
[32m+[m[32m            tkinter.messagebox.showerror("Error", "Este correo ya est√° registrado.")[m
[32m+[m[32m            return[m
[32m+[m[32m        # Llama a la funci√≥n para insertar los datos en la base de datos[m
[32m+[m[32m        try:[m
[32m+[m[32m            print(f"Debug: C√≥digo generado: {codigo}")[m
[32m+[m[32m            DataBase.insert_user(usuario, contra, nombre, apellido, correo, edad, imagen_ruta, codigo)[m
[32m+[m[32m            # Nota: No mostramos el mensaje de √©xito aqu√≠.[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print("Error", f"Ocurri√≥ un error al registrar al usuario: {e}")[m
[32m+[m[32m            return False  # Retornamos False para indicar que el registro no fue exitoso[m
[32m+[m
[32m+[m[32m        return True  # Retornamos True para indicar que el registro fue exitoso[m
[32m+[m
[32m+[m[32m    def on_register_button_click(self):[m
[32m+[m[32m        print("Bot√≥n de registro clickeado")[m
[32m+[m
[32m+[m[32m        # Intentamos registrar al usuario.[m
[32m+[m[32m        if self.registrar_usuario():[m
[32m+[m[32m            contrasena = self.entry_Contra.get()[m
[32m+[m[32m            if not self.validar_contrasena(contrasena):[m
[32m+[m[32m                tkinter.messagebox.showerror("Error",[m
[32m+[m[32m                                             "La contrase√±a no cumple con los requisitos. - M√≠nimo 8 caracteres- M√°ximo 16 caracteres- Al menos una letra may√∫scula- Al menos una letra min√∫scula- Al menos un n√∫mero- Al menos un car√°cter especial: @#$%^&+=")[m
[32m+[m[32m                return[m
[32m+[m
[32m+[m[32m            # Ahora solicitamos la verificaci√≥n[m
[32m+[m[32m            self.solicitar_verificacion()[m
[32m+[m
[32m+[m[32m    def solicitar_verificacion(self):[m
[32m+[m[32m        # Aqu√≠ puedes abrir una nueva ventana o usar la actual para solicitar el c√≥digo al usuario.[m
[32m+[m[32m        codigo_ingresado = simpledialog.askstring("Verificaci√≥n",[m
[32m+[m[32m                                                  "Por favor, ingresa el c√≥digo de verificaci√≥n enviado a tu correo:",[m
[32m+[m[32m                                                  parent=self)[m
[32m+[m
[32m+[m[32m        correo = self.entry_Correo.get()  # Obtenemos el correo desde la GUI[m
[32m+[m
[32m+[m[32m        if DataBase.confirm_email(correo, codigo_ingresado):[m
[32m+[m[32m            tkinter.messagebox.showinfo("√âxito", "Correo verificado con √©xito.")[m
[32m+[m[32m            # Aqu√≠ puedes proceder con el siguiente paso, por ejemplo, registro facial.[m
[32m+[m[32m            self.registro_facial()[m
[32m+[m[32m        else:[m
[32m+[m[32m            tkinter.messagebox.showerror("Error", "El c√≥digo de verificaci√≥n es incorrecto o ha expirado.")[m
[32m+[m[32m            # Opcionalmente, puedes permitir que el usuario lo intente de nuevo o cancelar el registro.[m
 [m
     def update_edad_label(self, value):[m
[31m-        self.edad_label.configure(text=dic.Age[dic.language] + f" :{round(value)}")[m
[32m+[m[32m        self.edad_label.configure(text=dic.Age[dic.language]+f" :{round(value)}")[m
 [m
     def abrir_archivo(self):[m
         archivo = filedialog.askopenfilename(filetypes=[(dic.Photo[dic.language], "*.png *.jpg *.jpeg *.gif *.bmp")])[m
         if archivo:[m
[31m-            user.picture = archivo[m
[31m-            print(archivo)[m
             # Cargar la imagen[m
             imagen = Image.open(archivo)[m
             # Redimensionar la imagen seg√∫n el tama√±o deseado (ajusta seg√∫n tus necesidades)[m
[31m-            imagen.thumbnail((80, 80))[m
[32m+[m[32m            imagen = imagen.resize((80, 80), Image.ANTIALIAS)[m
             # Convertir la imagen en un formato compatible con Tkinter[m
             imagen_tk = ImageTk.PhotoImage(imagen)[m
             # Mostrar la imagen en el CTkLabel[m
[36m@@ -267,18 +266,53 @@[m [mclass Registro(customtkinter.CTk):[m
             self.foto_label.configure(text="")[m
             self.foto_label.image = imagen_tk  # ¬°Importante! Debes mantener una referencia a la imagen para que no se elimine de la memoria[m
 [m
[32m+[m[32m    def cargar_imagen_usuario(self, usuario_img):[m
[32m+[m[32m        try:[m
[32m+[m[32m            # Carga la imagen[m
[32m+[m[32m            imagen = Image.open(usuario_img)[m
[32m+[m[32m            # Redimensiona la imagen (opcional)[m
[32m+[m[32m            imagen = imagen.resize((80, 80), Image.ANTIALIAS)[m
[32m+[m[32m            # Convierte la imagen para usarla en Tkinter[m
[32m+[m[32m            imagen_tk = ImageTk.PhotoImage(imagen)[m
[32m+[m[32m            # Muestra la imagen (asumiendo que `foto_label` es tu widget para mostrar la imagen)[m
[32m+[m[32m            self.foto_label.configure(image=imagen_tk)[m
[32m+[m[32m            self.foto_label.image = imagen_tk[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"No se pudo cargar la imagen: {e}")[m
[32m+[m
[32m+[m[32m    def validar_usuario(usuario):[m
[32m+[m[32m        """[m
[32m+[m[32m        Valida que el nombre de usuario no contenga obscenidades.[m
[32m+[m[32m        """[m
[32m+[m[32m        palabras_prohibidas = ["palabra1", "palabra2", "palabra3"]  # A√±ade las palabras que desees prohibir[m
[32m+[m
[32m+[m[32m        for palabra in palabras_prohibidas:[m
[32m+[m[32m            if palabra.lower() in usuario.lower():[m
[32m+[m[32m                return False[m
[32m+[m[32m        return True[m
[32m+[m
[32m+[m[32m    @staticmethod[m
[32m+[m[32m    def validar_contrasena(contrasena):[m
[32m+[m[32m        """[m
[32m+[m		[32mValida que la contrase√±a cumpla con los siguientes requisitos:[m
[32m+[m		[32m- M√≠nimo 8 caracteres[m
[32m+[m		[32m- M√°ximo 16 caracteres[m
[32m+[m		[32m- Al menos una letra may√∫scula[m
[32m+[m		[32m- Al menos una letra min√∫scula[m
[32m+[m		[32m- Al menos un n√∫mero[m
[32m+[m		[32m- Al menos un car√°cter especial[m
[32m+[m		[32m"""[m
[32m+[m[32m        if (8 <= len(contrasena) <= 16 and[m
[32m+[m[32m                re.search("[a-z]", contrasena) and[m
[32m+[m[32m                re.search("[A-Z]", contrasena) and[m
[32m+[m[32m                re.search("[0-9]", contrasena) and[m
[32m+[m[32m                re.search("[@#$%^&+=]", contrasena)):[m
[32m+[m[32m            return True[m
[32m+[m[32m        return False[m
     def iniciar(self):[m
         self.destroy()[m
         menu.Menu_principal().mainloop()[m
 [m
[31m-    def toggle_calendar(self):[m
[31m-        if self.calendario.winfo_ismapped():[m
[31m-            self.calendario.place_forget()[m
[31m-            self.edad_button.place_forget()[m
[31m-        else:[m
[31m-            self.calendario.place(relx=0.8, rely=0.7, anchor=customtkinter.CENTER)[m
[31m-            self.edad_button.place(relx=0.5, rely=0.79, anchor=customtkinter.CENTER)[m
[31m-[m
     def change_appearance_mode_event(self, new_appearance_mode: str):[m
         customtkinter.set_appearance_mode(new_appearance_mode)[m
 [m
[36m@@ -287,20 +321,24 @@[m [mclass Registro(customtkinter.CTk):[m
         customtkinter.set_widget_scaling(new_scaling_float)[m
 [m
     def registro_facial(self):[m
[31m-[m
[31m-        # Vamos a capturar el rostro[m
[31m-        cap = cv2.VideoCapture(0)  # Elegimos la camara con la que vamos a hacer la deteccion[m
[31m-        while (True):[m
[31m-            ret, frame = cap.read()  # Leemos el video[m
[31m-            frame = np.flip(frame, axis=1)[m
[31m-            cv2.imshow(dic.FacialRegistration[dic.language], frame)  # Mostramos el video en pantalla[m
[31m-            if cv2.waitKey(1) == 27:  # Cuando oprimamos "Escape" rompe el video[m
[31m-                break[m
[31m-        usuario_img = self.entry_Username.get()[m
[31m-        cv2.imwrite(usuario_img + ".jpg",[m
[31m-                    frame)  # Guardamos la ultima caputra del video como imagen y asignamos el nombre del usuario[m
[31m-        cap.release()  # Cerramos[m
[31m-        cv2.destroyAllWindows()[m
[32m+[m[32m        try:[m
[32m+[m[32m                # Vamos a capturar el rostro[m
[32m+[m[32m            cap = cv2.VideoCapture(0)  # Elegimos la camara con la que vamos a hacer la deteccion[m
[32m+[m[32m            while (True):[m
[32m+[m[32m                ret, frame = cap.read()  # Leemos el video[m
[32m+[m[32m                frame = np.flip(frame, axis=1)[m
[32m+[m[32m                cv2.imshow(dic.FacialRegistration[dic.language], frame)  # Mostramos el video en pantalla[m
[32m+[m[32m                if cv2.waitKey(1) == 27:  # Cuando oprimamos "Escape" rompe el video[m
[32m+[m[32m                    break[m
[32m+[m[32m            usuario_img = self.entry_Username.get()[m
[32m+[m[32m            cv2.imwrite(usuario_img + ".jpg",frame)  # Guardamos la ultima caputra del video como imagen y asignamos el nombre del usuario[m
[32m+[m
[32m+[m[32m            cap.release()  # Cerramos[m
[32m+[m[32m            cv2.destroyAllWindows()[m
[32m+[m[32m            tkinter.messagebox.showinfo("√âxito", "Usuario registrado con √©xito.")[m
[32m+[m[32m            self.iniciar()[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"Error en registro facial: {e}")[m
 [m
         def reg_rostro(img, lista_resultados):[m
             data = pyplot.imread(img)[m
[36m@@ -311,7 +349,7 @@[m [mclass Registro(customtkinter.CTk):[m
                 pyplot.axis('off')[m
                 cara_reg = data[y1:y2, x1:x2][m
                 cara_reg = cv2.resize(cara_reg, (150, 200),[m
[31m-                                      interpolation=cv2.INTER_CUBIC)  # Guardamos la imagen con un tama√±o de 150x200[m
[32m+[m[32m                                        interpolation=cv2.INTER_CUBIC)  # Guardamos la imagen con un tama√±o de 150x200[m
                 cv2.imwrite(usuario_img + ".jpg", cara_reg)[m
                 pyplot.imshow(data[y1:y2, x1:x2])[m
 [m
[36m@@ -320,4 +358,6 @@[m [mclass Registro(customtkinter.CTk):[m
         detector = MTCNN()[m
         caras = detector.detect_faces(pixeles)[m
         reg_rostro(img, caras)[m
[31m-        # self.iniciar()[m
[32m+[m[32m        self.iniciar()[m
[41m+[m
[41m+[m
